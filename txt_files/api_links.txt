
# Exploits
# sleep timer of 1 minute
# Malpedia: Family name references & IDs
# website - https://malpedia.caad.fkie.fraunhofer.de
	apis
	/api/get/families -
		/api/list/families - returns list of families
		returns dict with threat name as keys
			inside threat_name : 'alt_names', 'attribution', 'common_name', 'description', 'library_entries', 'notes', 'sources', 'updated', 'urls', 'uuid' 
	/api/get/actors -
		Returns dict with threat groups as keys
			inside threat_groups : 'description', 'meta', 'uuid', 'value' 

# Threatfox
# website - https://threatfox-api.abuse.ch/api/v1/
# Works with jsonified POST request data as opposed to GET requests

	Query types
	'{ "query": "tag_list" }'
		- Obtain a list of tags known to ThreatFox
	'{ "query": "types" }'
		- obtain a list of supported IOC / threat types from ThreatFox
	'{ "query": "malware_list" }'
		- obtain a list of supported malware families from ThreatFox
	'{ "query": "malwareinfo", "malware": "malware_name", "limit": <max 1000> }'
		- search for IOCs on ThreatFox that are associated with a certain malware family

	'{ "query": "get_iocs", "days": 7 }'
		- range of days should be between 1 and 7

	platform classification:
		- osx - MacOs
		- win - Windows
		- apk - Android
		- Jar - Java Archive
		- elf - Linux/Unix


Vulnerabilities
# sleep timer of 1 minute
# separate operation

#cisa
#list of known_exploited_vulnerabilities in JSON format

# query_api : https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json

	query_keys: title, catalogVersion, dateReleased, count, vulnerabilities
	access to vulnerabilities: requests.get(query_api).json().get('vulnerabilities')
		vulnerabilities_keys: 
			cveID - can be used to link to nist cve information,
			vendorProject,
			VulnerabilityName - used for query purposes,
			dateAdded, - ''
			shortDescription, - ''
			requiredAction - Article information,
			dueDate,
			knownRansomwareCampaignUse,
			notes

#nist

#query_api: https://services.nvd.nist.gov/rest/json/cves/2.0
	.json().get('vulnerabilities')[0].get('cve').get('metrics')
	- Used to get metrics from NVD responses
		- metrics contains all info you need
	- .json().get('vulnerabilities) - returns a list of vulnerabilities
		to access the vulnerabilities: 
			'id' - use alongside  the cisa for comparison,
			'sourceIdentifier',
			'published',
			'lastModified',
			'vulnStatus',
			'descriptions',
			'metrics' - contains all different ratings including vectorString,
			'weaknesses',
			'configurations',
			'references'

	# possibly use the query string to start from newer vulnerabilities and have a separate category for earlier vulnerabilities


Backend design
- Combine the Vulnerability API returns into one category
- Store in mysql
- keep updating as it runs but current entries should be about 1000 at the very least
- Categorization should encompass
	* Vector Strings parameters
	* date of discovery

Future_implementations
# cisa_data
# nist_data

